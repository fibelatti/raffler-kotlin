apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.4"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testPinboardapiDebugUnitTest']) {

    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        html {
            enabled = true
            destination = file("${rootProject.buildDir}/reports/coverage-report")
        }
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/R2.class',

        '**/BuildConfig.*',
        '**/Manifest*.*',

        'android/**/*.*',
        '**/*Activity*.*',
        '**/*Fragment*.*',
        '**/*Adapter.*',
        '**/*ViewHolder*.*',
        '**/*Layout.*',
        '**/*View.*',

        '**/*Test*.*',

        '**/*$InjectAdapter*.*',
        '**/*Injector*.*',
        '**/*Module.*',
        '**/*Component.*',
        '**/*Injector*.*',

        '**/*Dto*.*'
    ]

    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))

    doLast() {
        print "file://${reports.html.destination}/index.html"
    }
}

task copyTestClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debug"
    into "build/intermediates/classes/debug"
}
